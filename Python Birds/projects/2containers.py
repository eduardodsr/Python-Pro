# -*- coding: utf-8 -*-
"""2Containers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NkaGeSlwsp3CAagRvnouddZqx_vHVVxK

**1.3. Containers e Iteração**

**Descrição:**
Nesse capítulo você vai conferir diversos tipos de containers em Python. Os containers são estruturas de dados que contém referências para outros objetos. Já a iteração é a maneira pela qual você navega nos elementos de um container constituindo então o outro principal assunto a ser abordado.

**1.3.1. String, Dir e Help**

**1.3.2. Lista e Range**

**1.3.3. Tupla e Id**

**1.3.4. Acesso, Tamanho e Fatiamento**

**1.3.5. While**

**1.3.6. For**

**1.3.7. Dicionários/Mapas**

**1.3.8. Iteração em Dicionário**

**Containers** - contém uma sequência de Objetos.
Em Python tudo é um objeto.

**1.3.1. String, Dir e Help**

Nesse tópico será apresentado o container cadeia de caracteres, do inglês string. Ele é utilizado para representar texto dentro do código. Além disso você vai aprender as funções **dir** e help para poder investigar os elementos que constituem qualquer objeto diretamente no console.
"""

# 1.3.1. String, Dir e Help

# String
nome ='Eduardo'
print(nome)
type(nome)

type('')

nome1 = "Joana D'Arc"
nome2 = 'Joana D\'Arc'
nome3 = '''Joana D'Arc'''
print(nome1)
print(nome2)
print(nome3)

# Pular linha (salto ou quebra de linha) podemos utilizar \n
'Python\nPro'

print(_)

nome = 'Eduardo\nRodrigues'
print(nome)

'''Eduardo
Rodrigues'''

print(_)

'''Eduardo Rodrigues'''

'Eduardo '+'Rodrigues'

'tudo bem! '*3

'oi ' *3

# dir([object]) -> list of strings
# dir - ao passar um objeto, ele apresenta uma lista de strings, atributos e métodos
dir('')

help('Eduardo'.lower)

# lower(...) method return a copy of the string S converted to lowercase.
'EDUARDO RODRIGUES'.lower()

help('Eduardo Rodrigues'.upper)

# upper(...) method. Return a copy of S converted to uppercase.
'Eduardo Rodrigues'.upper()

"""**1.3.2. Lista e Range**

Nesse tópico será abordado o container Lista. Essa estrutura é utilizada em larga escala na esmagadora maioria dos programas escritos em Python, por isso é importantíssimo conhecê-la em detalhes. Além disso será visto como utilizar a função range para gerar listas com progressões aritméticas.
"""

# container
# Lista - para criar uma lista vamos utilizar os [colchetes]
lista = [1,2,3]
print(lista)
type(lista)

# range - serve para criar uma P.A. (Progressão Aritmética)
# Todo intervalo em Python é fechado no início e aberto no final
lista = list(range(10)) 
# vai considerar o início sendo 0 (inclusivo, incluido) e o final 10 (não está incluído)
print(lista)

lista=list(range(1, 10))
print(lista)

"""range(*args, **kwargs)

range(stop) -> range object

range(start, stop[, step]) -> range object
"""

# lista crescente
lista=list(range(1,10,2))
print(lista)

# lista decrescente
lista=list(range(10,0,-2))
print(lista)

# sort() - ordenação os elementos na lista
lista =[2, 4, 6, 8, 10, 1, 3, 5, 7, 9]
lista.sort()
print(lista)

# append() - incluir um elemento no final da lista
lista = [2, 4, 6, 8, 10]
lista.append(12)
print(lista)

# pop() - remover o último elemento da lista e retorna-lo
lista = [2, 4, 6, 8, 10]
lista.pop()
print(lista.pop())
print(lista)

# extend() - passar uma lista com vários elementos
lista = [2, 4, 6, 8, 10]
lista.extend([12, 14])
lista

# concatenação
lista = [2, 4, 6, 8, 10, 12, 14] 
novaLista = lista + [16, 18]
print(novaLista)

"""# split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
"""

# split()
'Python Pro'.split()

# split()
'Python-Pro'.split('-')

# Podemos criar qualquer objeto dentro da mesma lista diferente de outras linguagens
lista = [1, 1.0, 'Eduardo', 2j]
print(lista)

help(str)

"""**1.3.3. Tupla e Id**

Nesse tópico será abordado o container Tupla. Apesar de muito parecida com a lista, a tupla é imutável, o que significa não ser possível alterar as referências depois de tê-la criado. Também será visto como utilizar a funcão id para identificar unicamente objetos durante a execução de um programa Python.
"""

# Tupla (ou Tuple) é imutável
tupla= (1,2)
type(tupla)

dir(tupla) # Não existe os métodos iguais da lista

tuple(range(6))

2+3*4

(2+3)*4

(6)

type((6))

(6,)

type((6,))

registro=('Eduardo', 30)
nome, idade = registro

nome

idade

registro_2=('Renzo', 35)

registro_2

novaTupla = registro + registro_2
print(novaTupla)

"""**id(obj)**

Return the identity of an object.

This is guaranteed to be unique among simultaneously existing objects.
(CPython uses the object's memory address.)
"""

# id(obj) - A função id() retorna um valor único que identica o objeto
id(registro)

# id
id(registro_2)

id(registro + registro_2)

"""**1.3.4. Acesso, Tamanho e Fatiamento**

Nesse tópico você vai aprender como acessar elementos de um container por indíces inteiros, calcular o número de elementos presentes e também fatiar as estruturas em sub sequências.
"""

nome='Eduardo'

print(nome[0])
print(nome[1])
print(nome[2])
print(nome[3])
print(nome[4])
print(nome[5])
print(nome[6])

print(nome[-1])
print(nome[-2])
print(nome[-3])
print(nome[-4])
print(nome[-5])
print(nome[-6])
print(nome[-7])

nome='Eduardo'
len(nome)

# Retornar o último elemento do nome, ex. não legível
nome[len(nome)-1]

# Retornar o último elemento do nome, ex. legível
nome[-1]

# Retorna os 3 primeiros caracteres
nome[0:3]

# Retorna os 3 ultimos caracteres
nome[-3:len(nome)]

# Retorna os 3 ultimos caracteres, outra forma
nome[-3:]

# Retorna os 3 primeiros caracteres, outra forma
nome[:3]

# Resultado inverso da str nome
nome = 'Eduardo'
nome[::-1]

lista = list(range(10))
print(lista)

lista[0]

lista[-1]

lista[:3]

lista[::-1]

# len() - retorna o tamanho da lista
len(lista)

"""**1.3.5. While**

Nesse tópico será abordado o primeiro tipo de laço, o while. Ele será utilizado em conjunto com range e acesso a elementos para imprimir todos elementos de um container.
"""

nome='Eduardo'
i=0
while (i < len(nome)):
  print(nome[i])
  i+=1
print('\nFIM')

"""**1.3.6. For**

Nesse tópico será apresentado o for. Ele é o tipo de laço de iteração mais utilizado em Python. Para melhor entendimento ele será utilizado para acessar todos elementos de um container e poder comparar o código gerado com o do tópico anterior, feito com laço while.
"""

for i in nome:
  print(i)
print('\nFIM')

"""enumerate(*args, **kwargs)

enumerate(iterable[, start]) -> iterator for index, value of iterable

Return an enumerate object.
"""

# enumerate()
# i = indice
# v = valor
for i, v in enumerate(nome):
  print(i,v)

"""**1.3.7. Dicionários/Mapas**

Nesse tópico será abordado o container dicionário, que também é chamado de mapas em outras linguagens. Essa estrutura é utilizada para resolver problemas do tipo chave e valor, como você vai poder conferir ao conectar países às suas respectivas línguas.
"""

linguas = {'br':'portugues', 'us':'ingles'}
print(linguas)
type(linguas)

linguas['br']

linguas['us']

linguas.get('es','nao definida')

linguas.get('br','nao definida')

'br' in linguas

'us' in linguas

'es' in linguas

6 in list(range(10))

10 in list(range(10))

linguas['es']='espanhol'

linguas['es']

print(linguas)

"""**1.3.8. Iteração em Dicionário**

Nesse tópico será abordado como iterar nos diferentes elementos de um dicionário: chaves, valore e itens.
"""

for chaves in linguas:
  print(chaves)

# keys() - método keys (chaves)
for chaves in linguas.keys():
  print(chaves)

# values () - método values (valores)
for valor in linguas.values():
  print(valor)

# items() - método items(chaves e valores)
for dicionario in linguas.items():
  print(dicionario)
type(dicionario)

# items() - método items(chaves e valores)
for chave, valor in linguas.items():
  print(chave, valor)

type(chave)

type(valor)

# pop() - remove o elemento selecionado
linguas.pop('br') # remove o elemento {'br':'portugues'}
linguas

linguas = {'br':'portugues', 'us':'ingles', 'es': 'espanhol'}

# del () - remove o elemento selecionado
del linguas['es']
linguas