# -*- coding: utf-8 -*-
"""3Modularizacao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v50H1OQPJx53tZtQCJ_-ktdqdAKhfF4G

**1.4. Modularização**

Descrição:
Nesse capítulo você vai aprender como modularizar seu código com estrutura básicas da linguagem Python: Funções, Módulos e Pacotes. Assim seu código começa a ser dividido para que não fique sobrecarregado. Você vai conferir também como documentar o seu código para facilitar a leitura. Por fim será feito um exercício ao final da seção abordando os conceitos de toda a sessão Programação Procedural, finalizando com um tópico de retrospectiva.

- 1.4.1. Função e PEP 8
- 1.4.2. Parâmetros de Função
- 1.4.3. Parâmetros Variáveis
- 1.4.4. Módulo
- 1.4.5. Debug
- 1.4.6. Import e name
- 1.4.7. Pacote
- 1.4.8. Docstring e Comentário
- 1.4.9. Contagem de Caracteres com Lista
- 1.4.10. Contagem de Caracteres com Dicionário
- 1.4.11. Retrospectiva: Paradigma Procedural

**1.4.1. Função e PEP 8**

Nesse tópico será abordado como construir uma função. Além disso você vai aprender o que é uma PEP, em particular a 8, que é um guia de estilos para escrita de código Python.
"""

# PEP 8 - Style Guide for Python Code (Guia de Estilo para Código Python)

https://www.python.org/dev/peps/pep-0008/

# Criando uma função
def ola_mundo():
  return 'Olá, Mundo!'

# Verificar o tipo
type(ola_mundo)

# chamando a função ola_mundo
ola_mundo()

# criando uma função vazia NULL (NoneType), função que não retorna nada
def funcao_nula():
  pass

resultado = funcao_nula()
type(resultado)

"""**1.4.2. Parâmetros de Função**

Nesse tópico você vai aprender mais detalhes sobre os parâmetros de função: como definir valores padrão, como passar valores pode nome em vez de justaposição. Como item extra, ainda vai aprender o básico sobre f-strings, uma cadeia de caracteres que permite utilizar valores de variáveis em sua construção.
"""

def ola(nome):
  return f'Olá, {nome}'

ola('Eduardo Rodrigues')

def nome_sobrenome(nome, sobrenome):
  return f'Nome: {nome} - Sobrenome: {sobrenome}'

nome_sobrenome('Eduardo', 'Rodrigues')

def ola(nome, sobrenome='Rodrigues'):
  return f'Olá {nome} {sobrenome}'

ola('Eduardo')

ola('Eduardo', 'Rodrigues')

# Definindo um sobrenome diferente do padrão, def ola(nome, sobrenome='Rodrigues')
ola('Eduardo', 'Silva')

ola(sobrenome='Rodrigues', nome='Eduardo')

"""**1.4.3. Parâmetros Variáveis**

Nesse tópico você vai aprender a criar uma função com um número variável de argumentos, tanto por justaposição quanto por nome.
"""

def soma(*parcelas):
  print(parcelas)
  print(type(parcelas))

soma()

soma(1)

soma(1, 2)

# Exemplo criando uma função
def soma(*parcelas):
  aux=0
  for valor in parcelas:
    aux +=valor
  return aux

soma()

soma(2)

soma(2,4)

soma(2, 4, 6)

def soma(*args):
  i=0
  for valor in args:
    i += valor
  return i

soma(2,4,10)

def f(**kwargs):
  print(kwargs) 
  print(type(kwargs))

f()

f(1) # vai retornar erro, o tipo é um dicionário e não uma tupla.

f(nome='Eduardo')

f(nome='Eduardo', sobrenome='Rodrigues')

args = (2, 4, 10) # class 'tuple'
kwargs = {'nome': 'Eduardo', 'sobrenome': 'Rodrigues'} # class 'dict'

print(type(args))
print(type(kwargs))

print(args)
print(kwargs)

args = (2, 4, 10) # class 'tuple' # justaposição inseridos na tuple
kwargs = {'nome': 'Eduardo', 'sobrenome': 'Rodrigues'} # class 'dict' # argumentos nomeados

def f(*args, **kwargs):
  print(args)
  print(kwargs)

f()

# justaposição inseridos na tuple () - class 'tuple'
# argumentos nomeados inseridos {} - class 'dict' #

args = (2, 4, 10) # class 'tuple' # justaposição inseridos na tuple
kwargs = {'nome': 'Eduardo', 'sobrenome': 'Rodrigues'} # class 'dict' # argumentos nomeados

def f(*args, **kwargs):
  print(args)
  print(kwargs)

f()

f(1,2, nome='Eduardo', sobrenome='Rodrigues')

f(args, kwargs)
# args - class 'tuple' # justaposição inseridos na tuple (parenteses)
# kwargs - class 'dict' # argumentos nomeados {chaves}

"""**args** - transforma uma 'tuple' os argumentos. ( tuple )

**kwargs** - transforma um 'dict' em argumentos. { dict }

**1.4.4. Módulo**

Nesse tópico você vai aprender o que é e como criar um módulo.
"""

# O Módulo funciona como um script a ser executado em Python
def soma(num1, num2):
  return num1 + num2

print(soma(1, 2))

"""**1.4.6. Import e ```__name__.```**

Nesse módulo você vai aprender a importar módulos e também a peculiaridade do atributo ```__name__.```
"""

def soma(num1, num2):
  return num1 + num2

print(soma(1,2))

def soma(num1, num2):
  return num1 + num2

if __name__ == '__main__':
  print(1, 2)

print(soma(4, 5))

"""**1.4.7. Pacote**

Nesse tópico você vai aprender a organizar seu código em pacotes e também as diferentes maneiras de importar módulos.
"""

# Python Packages - são pastas para colocar módulos para melhor organizar o seu programa

# IDE PyCharm

"""**1.4.8. Docstring e Comentário**
 
Nesse tópico você vai aprender a documentar seu código com **docstrings** e **comentários** para aumentar e legibilidade.
"""

# IDE PyCharm

"""**1.4.9. Contagem de Caracteres com Lista** 

Nesse tópico será resolvido o clássico problema de entrevistas de emprego de contagem de caracteres. Nessa primeira versão o problema será resolvido com uma lista.
"""

# IDE PyCharm