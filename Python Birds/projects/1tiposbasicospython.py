# -*- coding: utf-8 -*-
"""1TiposBasicosPython.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MAwTHDqmt07OwOR9VV0PEFAQUDBaagRR

**1.2. Tipos Básicos**

Nesse capítulo você vai aprender sobre os tipos embutidos. Eles formam um conjunto básicos de classes que serve para modelar o seu programa, como números e palavras.

**1.2.1. Tipo Inteiro (int)**

Conheça o primeiro tipo básico, o inteiro. Aprende como fazer operações com números inteiros e também obter o tipo de um objeto com a função type.
"""

# Comentário em Python
# Tudo em Python é um Objeto

# type
type(1)

# Exemplos de Operações

1+1

2-1

6*7

5/2

5//2 # Divisão inteira

5/2

2**3

2**63

2**1000

import this

1000000

1_000_000 # é a mesma coisa que 1000000

"""**1.2.2. Tipo Float**

Aprende sobre o tipo numérico float, utilizado para representar números que contenham parte decimal
"""

# Tipo Float - são os números reais.
# Em Python não utilizamos o ' ; ' ponto e virgula (na lingua inglesa o separador da casa decimal é ponto)

type(1.35)

0.34

.34

.1+.2

.1*.2

.1/.2

type(1.0)

type(1)

int(1.0)

_ # o _ underscore (underline ou subtraço) retorna o ultimo elemento impresso no console

# tipo do ultimo elemento impresso no console
type(_)

float(1)

type(_)

int(1.5) # O Python vai truncar o número, ou seja, pegar somente a parte inteira.
# vai ignorar a parte da fração

# complex 
1j

type(1j)

1j**2 
# parte real -1
# parte imaginária 0j

(1+1J)*(1+1J)

(1+1J)**2 # aplicar o binomio de newton

# binomio de newton
(1+1J)**4

"""**1.2.3. Variável e Atribuição**

Aprende o que é e como criar uma variável e alterar valores através da operação de atribuição.

REGRA: A variável deve começar sempre com uma letra ou underscore (underline)
"""

n=1 # isso é uma atribuição

n

type(n)

_i = 5.0

_i

# vai apresentar erro ao criar uma variável com número
7n = 9 # SyntaxError: invalid syntax

n_n8 = 8

n_n8

x # NameError: name 'x' is not defined

n

type(n)

n=1j

n

type(n)

n=1.0

type(n)

n+1 # retorna n=1.0, (1.0 + 1) = 2.0

resultado = n+1
print(resultado)

n=n+1
print(n)

n = 1
n += 1 # é mesma coisa que n = n + 1
print(n)

n = 2
n *= 4 # é mesma coisa que n = n * 4
print(n)

"""**1.2.4. Tipo Booleano (bool)**

Aprenda como criar booleanos e o nome das constante em Python para valores verdadeiro e falso. Confira também as operações lógicas fundamentais: negação, "e" e "ou". Por fim confira como comparar números.
"""

True

False

type(True)

# not
not False

not True

# Exemplo de Tabela Verdade
True or True

True or False

False or False

True and True

False and True

True or False

5>6

5<6

5<=6

5==6

6==6

6!=7

n=0
# 1 < n and n < 5 # Legibilidade conta é um dos principios do Python
1<n<5

"""**1.2.5. Desvios Condicionais**

Aprenda como executar porções de código de forma condicional. Confira também como é feita a definição de escopos em Python.
"""

# Serve para executar uma linha ou algumas linhas do programa ara verificar se uma condição foi atendida.

# identação - utilizar o <tap> ou 4 espaços, configurar o seu editor (IDE)
idade=3
if idade <18:
  print(17)
  print(16)

idade=18
if idade <18:
  print(17) # Nada será impresso

idade=18
if idade <18:
  print(17)
elif idade < 60:
  print(idade)

idade=65
if idade <18:
  print(17)
elif idade < 60:
  print(idade)
else:
  print(65)